@* Notifications (coloque no _Layout.cshtml ou partial) *@
<div id="notificacoes">
    @if (TempData["MensagemSucesso"] != null)
    {
        <div class="alert alert-success alert-dismissible fade alert-auto-dismiss rounded-4 shadow-sm" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            <strong>Sucesso!</strong> @TempData["MensagemSucesso"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["MensagemErro"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade alert-auto-dismiss rounded-4 shadow-sm" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <strong>Erro!</strong> @TempData["MensagemErro"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["MensagemAlerta"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade alert-auto-dismiss rounded-4 shadow-sm" role="alert">
            <i class="bi bi-exclamation-circle-fill me-2"></i>
            <strong>Atenção!</strong> @TempData["MensagemAlerta"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["MensagemInfo"] != null)
    {
        <div class="alert alert-info alert-dismissible fade alert-auto-dismiss rounded-4 shadow-sm" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i>
            <strong>Info:</strong> @TempData["MensagemInfo"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Tempo em ms antes de esconder automaticamente (5 segundos)
        const DISPLAY_TIME = 5000;

        // Seleciona todos os alerts marcados para auto-dismiss
        const alerts = document.querySelectorAll('.alert-auto-dismiss');

        alerts.forEach(function (el) {
            // Força reflow/próximo frame para garantir transição CSS ao adicionar classes
            requestAnimationFrame(() => {
                el.classList.add('showed'); // nossa classe custom para slide+fade-in
                el.classList.add('show');   // classe do Bootstrap para integração com fade
            });

            // Cria um timer para fechar após DISPLAY_TIME
            let timerId = setTimeout(() => {
                const bsAlert = bootstrap.Alert.getOrCreateInstance(el);
                bsAlert.close();
            }, DISPLAY_TIME);

            // Pause/resume ao passar o mouse (útil para leitura)
            el.addEventListener('mouseenter', function () {
                clearTimeout(timerId);
            });
            el.addEventListener('mouseleave', function () {
                // reinicia timer com um tempo menor para não demorar demais
                timerId = setTimeout(() => {
                    const bsAlert = bootstrap.Alert.getOrCreateInstance(el);
                    bsAlert.close();
                }, 2000);
            });

            // Ao iniciar o fechamento via Bootstrap, remove a classe 'showed' para a animação de saída
            el.addEventListener('close.bs.alert', function () {
                el.classList.remove('showed');
            });
        });
    });
</script>
